{
  "version": 3,
  "sources": ["../../src/main.js"],
  "sourcesContent": ["import * as core from '@actions/core';\nimport * as github from '@actions/github';\nimport lcovTotal from 'lcov-total';\nimport { config, inputs } from './config';\nimport { commentOnPR } from './github';\nimport { listFiles } from './utils';\nimport { mergeCoverages, detail, summarize, generateHTMLAndUpload } from './lcov';\nimport { createTempDir, roundToOneDecimalPlace, runningInPullRequest, buildHeader, buildMessageBody } from './utils';\n\nasync function run() {\n  const coverageFiles = await listFiles(inputs.coverageFilesPattern);\n  if (!coverageFiles.length) {\n    core.error(`${config.action_msg_prefix} no coverage lcov files found with pattern ${inputs.coverageFilesPattern}`);\n    process.exit(1);\n  }\n  const tmpDir = createTempDir();\n\n  try {\n    const mergedCoverageFile = await mergeCoverages(coverageFiles, tmpDir);\n    const totalCoverageRounded = roundToOneDecimalPlace(lcovTotal(mergedCoverageFile));\n    const errorMessage = `Code coverage: **${totalCoverageRounded}** %. Expected at least **${inputs.minimumCoverage}** %.`;\n    const isMinimumCoverageReached = totalCoverageRounded >= inputs.minimumCoverage;\n\n    if (inputs.gitHubToken && runningInPullRequest()) {\n      const octokit = github.getOctokit(inputs.gitHubToken);\n      const body = buildMessageBody({\n        header: buildHeader(isMinimumCoverageReached),\n        summary: await summarize(mergedCoverageFile),\n        details: await detail(mergedCoverageFile, octokit),\n        isMinimumCoverageReached,\n        errorMessage,\n      });\n\n      commentOnPR({\n        octokit,\n        updateComment: inputs.updateComment,\n        body,\n      });\n    } else {\n      core.warning(\n        `${config.action_msg_prefix} no github-token provided or not running in a PR workflow. Skipping creating a PR comment.`,\n      );\n    }\n\n    if (inputs.artifactName) {\n      generateHTMLAndUpload(coverageFiles, inputs.artifactName, tmpDir);\n    }\n\n    core.setOutput('total-coverage', totalCoverageRounded);\n    if (!isMinimumCoverageReached) {\n      core.setFailed(errorMessage.replace(/\\*/g, ''));\n    }\n  } catch (error) {\n    core.setFailed(`${config.action_msg_prefix} ${error.message}`);\n  }\n}\n\nrun();\n"],
  "mappings": "AAAA,UAAYA,MAAU,gBACtB,UAAYC,MAAY,kBACxB,OAAOC,MAAe,aACtB,OAAS,UAAAC,EAAQ,UAAAC,MAAc,WAC/B,OAAS,eAAAC,MAAmB,WAC5B,OAAS,aAAAC,MAAiB,UAC1B,OAAS,kBAAAC,EAAgB,UAAAC,EAAQ,aAAAC,EAAW,yBAAAC,MAA6B,SACzE,OAAS,iBAAAC,EAAe,0BAAAC,EAAwB,wBAAAC,EAAsB,eAAAC,EAAa,oBAAAC,MAAwB,UAE3G,eAAeC,GAAM,CACnB,MAAMC,EAAgB,MAAMX,EAAUF,EAAO,oBAAoB,EAC5Da,EAAc,SACjBjB,EAAK,MAAM,GAAGG,EAAO,iBAAiB,8CAA8CC,EAAO,oBAAoB,EAAE,EACjH,QAAQ,KAAK,CAAC,GAEhB,MAAMc,EAASP,EAAc,EAE7B,GAAI,CACF,MAAMQ,EAAqB,MAAMZ,EAAeU,EAAeC,CAAM,EAC/DE,EAAuBR,EAAuBV,EAAUiB,CAAkB,CAAC,EAC3EE,EAAe,oBAAoBD,CAAoB,6BAA6BhB,EAAO,eAAe,QAC1GkB,EAA2BF,GAAwBhB,EAAO,gBAEhE,GAAIA,EAAO,aAAeS,EAAqB,EAAG,CAChD,MAAMU,EAAUtB,EAAO,WAAWG,EAAO,WAAW,EAC9CoB,EAAOT,EAAiB,CAC5B,OAAQD,EAAYQ,CAAwB,EAC5C,QAAS,MAAMb,EAAUU,CAAkB,EAC3C,QAAS,MAAMX,EAAOW,EAAoBI,CAAO,EACjD,yBAAAD,EACA,aAAAD,CACF,CAAC,EAEDhB,EAAY,CACV,QAAAkB,EACA,cAAenB,EAAO,cACtB,KAAAoB,CACF,CAAC,CACH,MACExB,EAAK,QACH,GAAGG,EAAO,iBAAiB,4FAC7B,EAGEC,EAAO,cACTM,EAAsBO,EAAeb,EAAO,aAAcc,CAAM,EAGlElB,EAAK,UAAU,iBAAkBoB,CAAoB,EAChDE,GACHtB,EAAK,UAAUqB,EAAa,QAAQ,MAAO,EAAE,CAAC,CAElD,OAASI,EAAO,CACdzB,EAAK,UAAU,GAAGG,EAAO,iBAAiB,IAAIsB,EAAM,OAAO,EAAE,CAC/D,CACF,CAEAT,EAAI",
  "names": ["core", "github", "lcovTotal", "config", "inputs", "commentOnPR", "listFiles", "mergeCoverages", "detail", "summarize", "generateHTMLAndUpload", "createTempDir", "roundToOneDecimalPlace", "runningInPullRequest", "buildHeader", "buildMessageBody", "run", "coverageFiles", "tmpDir", "mergedCoverageFile", "totalCoverageRounded", "errorMessage", "isMinimumCoverageReached", "octokit", "body", "error"]
}
