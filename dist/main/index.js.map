{
  "version": 3,
  "sources": ["../../src/main.js"],
  "sourcesContent": ["import * as core from '@actions/core';\nimport * as github from '@actions/github';\nimport * as artifact from '@actions/artifact';\nimport * as exec from '@actions/exec';\nimport * as glob from '@actions/glob';\nimport * as path from 'path';\nimport lcovTotal from 'lcov-total';\nimport fs from 'fs';\nimport { config, inputs } from './config';\nimport { getChangedFilenames, commentOnPR, sha } from './github';\n\nfunction buildHeader(isMinimumCoverageReached) {\n  return `## ${isMinimumCoverageReached ? '' : ':no_entry:'} Code coverage of commit [<code>${sha().short}</code>](${\n    github.context.payload.pull_request.number\n  }/commits/${sha().full})\\n\\n`;\n}\n\nfunction buildMessageBody(params) {\n  const { header, summary, details, isMinimumCoverageReached, errorMessage } = params;\n\n  return `${header}<pre>${summary}\\n\\nChanged files coverage rate: ${details}</pre>\\n\\n${\n    isMinimumCoverageReached ? '' : `:no_entry: ${errorMessage}`\n  }`;\n}\n\nfunction runningInPullRequest() {\n  const allowedGitHubEvents = ['pull_request', 'pull_request_target'];\n  return allowedGitHubEvents.includes(github.context.eventName);\n}\n\nfunction roundToOneDecimalPlace(num) {\n  return Math.round(num * 10) / 10;\n}\n\nasync function listFiles(path) {\n  const globber = await glob.create(path, { followSymbolicLinks: false, matchDirectories: false });\n  return await globber.glob();\n}\n\nfunction createTempDir() {\n  try {\n    const tmpPath = `${process.env.GITHUB_WORKSPACE}/lcov-tmp-dir`;\n    fs.mkdirSync(tmpPath);\n    return tmpPath;\n  } catch (error) {\n    core.error(`${config.action_msg_prefix} creating a temp dir failed with: ${error.message}`);\n    process.exit(1);\n  }\n}\n\nasync function run() {\n  const coverageFiles = await listFiles(inputs.coverageFilesPattern);\n  if (!coverageFiles.length) {\n    core.error(`${config.action_msg_prefix} no coverage lcov files found with pattern ${inputs.coverageFilesPattern}`);\n    process.exit(1);\n  }\n  const tmpDir = createTempDir();\n\n  try {\n    const mergedCoverageFile = await mergeCoverages(coverageFiles, tmpDir);\n    const totalCoverageRounded = roundToOneDecimalPlace(lcovTotal(mergedCoverageFile));\n    const errorMessage = `Code coverage: **${totalCoverageRounded}** %. Expected at least **${inputs.minimumCoverage}** %.`;\n    const isMinimumCoverageReached = totalCoverageRounded >= inputs.minimumCoverage;\n\n    if (inputs.gitHubToken && runningInPullRequest()) {\n      const octokit = github.getOctokit(inputs.gitHubToken);\n      const body = buildMessageBody({\n        header: buildHeader(isMinimumCoverageReached),\n        summary: await summarize(mergedCoverageFile),\n        details: await detail(mergedCoverageFile, octokit),\n        isMinimumCoverageReached,\n        errorMessage,\n      });\n\n      commentOnPR({\n        octokit,\n        updateComment: inputs.updateComment,\n        body,\n      });\n    } else {\n      core.warning(\n        `${config.action_msg_prefix} no github-token provided or not running in a PR workflow. Skipping creating a PR comment.`,\n      );\n    }\n\n    if (inputs.artifactName) {\n      generateHTMLAndUpload(coverageFiles, inputs.artifactName, tmpDir);\n    }\n\n    core.setOutput('total-coverage', totalCoverageRounded);\n    if (!isMinimumCoverageReached) {\n      core.setFailed(errorMessage.replace(/\\*/g, ''));\n    }\n  } catch (error) {\n    core.setFailed(`${config.action_msg_prefix} ${error.message}`);\n  }\n}\n\nasync function generateHTMLAndUpload(coverageFiles, artifactName, tmpPath) {\n  const artifactPath = path.resolve(tmpPath, 'html').trim();\n\n  const args = [...coverageFiles, ...config.common_lcov_args, '--output-directory', artifactPath];\n  await exec.exec('genhtml', args, { cwd: inputs.workingDirectory });\n\n  const htmlFiles = await listFiles(`${artifactPath}/**`);\n  artifact.create().uploadArtifact(artifactName, htmlFiles, artifactPath, { continueOnError: false });\n}\n\nasync function mergeCoverages(coverageFiles, tmpPath) {\n  const mergedCoverageFile = `${tmpPath}/merged-lcov.info`;\n  const args = [];\n\n  for (const coverageFile of coverageFiles) {\n    args.push('--add-tracefile');\n    args.push(coverageFile);\n  }\n\n  args.push('--output-file');\n  args.push(mergedCoverageFile);\n\n  await exec.exec('lcov', [...args, ...config.common_lcov_args]);\n\n  return mergedCoverageFile;\n}\n\nasync function summarize(mergedCoverageFile) {\n  let output = '';\n  const options = {\n    listeners: {\n      stdout: (data) => {\n        output += data.toString();\n      },\n      stderr: (data) => {\n        output += data.toString();\n      },\n    },\n  };\n\n  await exec.exec('lcov', ['--summary', mergedCoverageFile, ...config.common_lcov_args], options);\n\n  const lines = output.trim().split(config.newline);\n  lines.shift(); // remove debug info\n  return lines.join('\\n');\n}\n\nfunction lineRefersToChangedFile(lineWithFilename, changedFiles) {\n  return changedFiles.some((changedFile) => lineWithFilename.startsWith(changedFile));\n}\n\nasync function detail(coverageFile, octokit) {\n  let output = '';\n  const options = {\n    listeners: {\n      stdout: (data) => {\n        output += data.toString();\n      },\n      stderr: (data) => {\n        output += data.toString();\n      },\n    },\n  };\n\n  const args = inputs.listFullPaths ? ['--list-full-path'] : [];\n  await exec.exec('lcov', ['--list', coverageFile, ...args, ...config.common_lcov_args], options);\n\n  let lines = output.trim().split(config.newline);\n  // remove debug info\n  lines.shift();\n  lines.pop();\n  lines.pop();\n\n  const changedFiles = await getChangedFilenames(octokit);\n  lines = lines.filter((line, index) => {\n    const includeHeader = index <= 2;\n    if (includeHeader) {\n      return true;\n    }\n\n    return lineRefersToChangedFile(line, changedFiles);\n  });\n\n  const onlyHeaderRemains = lines.length === 3;\n  return onlyHeaderRemains ? 'n/a' : `\\n  ${lines.join('\\n  ')}`;\n}\n\nrun();\n"],
  "mappings": "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",
  "names": ["core", "github", "artifact", "exec", "glob", "path", "lcovTotal", "fs", "config", "inputs", "getChangedFilenames", "commentOnPR", "sha", "buildHeader", "isMinimumCoverageReached", "buildMessageBody", "params", "header", "summary", "details", "errorMessage", "runningInPullRequest", "roundToOneDecimalPlace", "num", "listFiles", "createTempDir", "tmpPath", "error", "run", "coverageFiles", "tmpDir", "mergedCoverageFile", "mergeCoverages", "totalCoverageRounded", "octokit", "body", "summarize", "detail", "generateHTMLAndUpload", "artifactName", "artifactPath", "args", "htmlFiles", "coverageFile", "output", "options", "data", "lines", "lineRefersToChangedFile", "lineWithFilename", "changedFiles", "changedFile", "line", "index"]
}
